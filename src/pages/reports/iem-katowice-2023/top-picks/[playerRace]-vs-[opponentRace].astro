---
import ReportLayout from '../../../../layouts/TournamentTopPicksReportLayout.astro';
import {BuildPlayers} from '../../../../components/BuildPlayers';
import ReportDetails from '../../../../components/ReportDetails.astro';
import type {Race} from '../../../../components/BlockResults';
import { yearReportDefinitions } from '../../_definitions';
import {TournamentTopPicksReportParams, Status} from '../../_types';

export function getStaticPaths() {
  const MATCHUPS: [Race, Race][] = [
    ['Zerg', 'Protoss'],
    ['Protoss', 'Terran'],
    ['Terran', 'Zerg'],
    ['Protoss', 'Protoss'],
    ['Terran', 'Terran'],
    ['Zerg', 'Zerg'],
  ];

  const matchupBuilds: Record<Race, Record<Race, string[]>> = {
    Protoss: {
      Protoss: ['Gateway,Gateway,CyberneticsCore'],
      Terran: ['Gateway,Nexus,CyberneticsCore'],
      Zerg: ['Gateway,Nexus,CyberneticsCore'],
    },
    Terran: {
      Protoss: ['Barracks,OrbitalCommand,CommandCenter'],
      Terran: ['Barracks,OrbitalCommand,CommandCenter'],
      Zerg: ['Barracks,OrbitalCommand,CommandCenter'],
    },
    Zerg: {
      Protoss: ['Hatchery,SpawningPool'],
      Terran: ['Hatchery,SpawningPool'],
      Zerg: ['Hatchery,SpawningPool'],
    },
  };

  return MATCHUPS.map(([playerRace, opponentRace]) => {
    const matchup: Race[] = [playerRace, opponentRace];
    matchup.sort();

    const report = {
      year: '2023',
      tournament: 'IEM Katowice',
      matchup: matchup.join(''),
      playerRace,
      opponentRace,
      builds: {
        [playerRace]: matchupBuilds[playerRace][opponentRace],
        [opponentRace]: matchupBuilds[opponentRace][playerRace],
      },
      publishedAt: '2023-01-27',
      status: Status.WorkInProgress,
      definitions: yearReportDefinitions,
    };

    return {
      params: {playerRace: playerRace.toLowerCase(), opponentRace: opponentRace.toLowerCase()},
      props: report,
    };
  });
}

interface Props extends TournamentTopPicksReportParams {};
const {
  year,
  tournament,
  matchup,
  playerRace,
  opponentRace,
  publishedAt,
  updatedAt,
  status,
  definitions,
  updates,
  issues,
  builds,
} = Astro.props;

const endpoint = 'https://search.sc2.gg/build-players';
const [playerBuilds, opponentBuilds] = await Promise.all(
  Object.values(builds).map(async (matchupBuilds) => {
    return await Promise.all(matchupBuilds.map(async (build) => {
      const url = new URL(endpoint);
      url.searchParams.set('build_name', build);
      url.searchParams.set('matchup_name', matchup);
      url.searchParams.set('event_name', tournament);
      // url.searchParams.set('after', '2023-02-6');
      console.log('fetching URL', url.toString());
      const results = await fetch(url).then(res => res.json());
      return results;
    }));
  })
);

---
<ReportLayout tournament={tournament} year={year} playerRace={playerRace} opponentRace={opponentRace}>
  <ReportDetails
    publishedAt={publishedAt}
    updatedAt={updatedAt}
    status={status}
    definitions={definitions}
    updates={updates}
    issues={issues}
  />
  <BuildPlayers
    client:only="preact"
    builds={{
      [playerRace]: {
        build: builds[playerRace],
        players: playerBuilds,
      },
      [opponentRace]: {
        build: builds[opponentRace],
        players: opponentBuilds,
      },
    }}
  />
</ReportLayout>
