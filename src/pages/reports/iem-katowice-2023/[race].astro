---
import ReportLayout from '../../../layouts/TournamentReportLayout.astro';
import {MatchupTrees} from '../../../components/MatchupTrees';
import ReportDetails from '../../../components/ReportDetails.astro';
import type {Race} from '../../../components/BlockResults';
import { yearReportDefinitions } from '../_definitions';
import {TournamentReportParams, Status} from '../_types';
import { generateMatchupTrees } from '../_utils';
import treesKatowice2023 from './_build_trees.json' assert {type: "json"};

export function getStaticPaths() {
  const RACES: Race[] = ['Protoss', 'Terran', 'Zerg'];
  return RACES.map(race => {
    const report = {
      year: '2023',
      tournament: 'IEM Katowice',
      race: race,
      trees: generateMatchupTrees(treesKatowice2023)[race],
      publishedAt: '2023-02-14',
      status: Status.Finalized,
      definitions: yearReportDefinitions,
    };

    return {
      params: {race: race.toLowerCase()},
      props: report,
    };
  });
}

interface Props extends TournamentReportParams {};
const {year, tournament, race, publishedAt, updatedAt, status, definitions, updates, issues, trees} = Astro.props;
---
<ReportLayout tournament={tournament} year={year} race={race}>
  <ReportDetails
    description={`
      ${race} builds played at ${tournament} ${year} from all matchups.
      Explore the tree of builds all the way down to individual games through the follow-up buttons.
      Gasses are excluded from builds because their variations tends to make it hard to capture good groupings.
    `}
    publishedAt={publishedAt}
    updatedAt={updatedAt}
    status={status}
    definitions={definitions}
    updates={updates}
    issues={issues}
  />
  <MatchupTrees race={race} trees={trees} client:load />
</ReportLayout>
